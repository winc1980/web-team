---
import * as interfaces from '../../lib/interfaces.ts'
import {
  getPosts,
  getAllPosts,
  getRankedPosts,
  getPostBySlug,
  getPostsByTag,
  getBlock,
  getAllTags,
  getAllBlocksByBlockId,
  downloadFile,
  getAuthors,
} from '../../lib/notion/client.ts'
import {
  getPostLink,
  filePath,
  extractTargetBlocks,
} from '../../lib/blog-helpers.ts'
import Layout from '../../layouts/BlogLayout.astro'
import PostDate from '../../components/PostDate.astro'
import PostTags from '../../components/PostTags.astro'
import PostTitle from '../../components/PostTitle.astro'
import PostBody from '../../components/PostBody.astro'
import PostRelativeLink from '../../components/PostRelativeLink.astro'
import BlogPostsLink from '../../components/BlogPostsLink.astro'
import PostFeaturedImage from '../../components/PostFeaturedImage.astro'
import Author from '@/components/Author.astro'
import Toc from '@/components/Toc.astro'

export async function getStaticPaths() {
  const posts = await getAllPosts()
  return posts.map((post: interfaces.Post) => ({ params: { slug: post.Slug } }))
}

const { slug } = Astro.params

const post = await getPostBySlug(slug)
if (!post) {
  throw new Error('Post not found. slug: ${slug}')
}
const [
  blocks,
  allPosts,
  rankedPosts,
  recentPosts,
  tags,
  postsHavingSameTag,
  authors,
] = await Promise.all([
  getAllBlocksByBlockId(post.PageId),
  getAllPosts(),
  getRankedPosts(),
  getPosts(5),
  getAllTags(),
  getPostsByTag(post.Tags[0]?.name, 6),
  getAuthors(),
])

const fileAtacchedBlocks = extractTargetBlocks('image', blocks)
  .concat(extractTargetBlocks('file', blocks))
  .filter((block) => {
    if (!block) {
      return false
    }
    const imageOrFile = block.Image || block.File
    return imageOrFile && imageOrFile.File && imageOrFile.File.Url
  })

// Download files
await Promise.all(
  fileAtacchedBlocks
    .map(async (block) => {
      const expiryTime = (block.Image || block.File).File.ExpiryTime
      if (Date.parse(expiryTime) > Date.now()) {
        return Promise.resolve(block)
      }
      return getBlock(block.Id)
    })
    .map((promise) =>
      promise.then((block) => {
        let url!: URL
        try {
          url = new URL((block.Image || block.File).File.Url)
        } catch (err) {
          console.log('Invalid file URL')
          return Promise.reject()
        }
        return Promise.resolve(url)
      })
    )
    .map((promise) => promise.then(downloadFile))
)

const currentPostIndex = allPosts.findIndex((post) => post.Slug === slug)
const prevPost = allPosts[currentPostIndex + 1]
const nextPost = allPosts[currentPostIndex - 1]
// ページに登録されているAuthorと一致するAuthor情報の詳細を取得
const authorDetails = authors.props.items.find(
  (item) => item.pageId === post.Author
)

let ogImage = ''
if (post.FeaturedImage && post.FeaturedImage.Url) {
  ogImage = new URL(filePath(new URL(post.FeaturedImage.Url)), Astro.site)
}
---

<Layout
  title={post.Title}
  description={post.Excerpt}
  path={getPostLink(post.Slug)}
  ogImage={ogImage}
  blogTitle={post.Title}
>
  <div slot="main">
    <div>
      <PostFeaturedImage post={post} enableLink={false} />
      <div class="blog-content__container">
        <PostTitle post={post} enableLink={false} />
        <PostTags post={post} />
        <PostDate post={post} />
        <PostBody blocks={blocks} />
        <hr/>
        {authorDetails && post.ShowAuthor == true ? <Author authorDetails={authorDetails} /> : null}
        <PostTags post={post} />
        <PostRelativeLink prevPost={prevPost} nextPost={nextPost} />
      </div>
    </div>
  </div>

  <div slot="aside" class="aside">
    {authorDetails && post.ShowAuthor == true ? <Author authorDetails={authorDetails} /> : null}
    <Toc />
    <!-- <BlogPostsLink
      heading="同じカテゴリの投稿"
      posts={postsHavingSameTag.filter(
        (p: interfaces.Post) => p.Slug !== post.Slug
      )}
    /> -->
    <!-- <BlogPostsLink heading="Latest posts" posts={recentPosts} /> -->
    <!-- <BlogTagsLink heading="Categories" tags={tags} /> -->
  </div>
  <div slot="recommend" class="recommend">
    <BlogPostsLink heading="おすすめの記事" posts={rankedPosts} />
  </div>
</Layout>
